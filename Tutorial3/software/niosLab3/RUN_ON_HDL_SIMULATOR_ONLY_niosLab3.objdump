
RUN_ON_HDL_SIMULATOR_ONLY_niosLab3.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_niosLab3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00000f7c memsz 0x00000f7c flags r-x
    LOAD off    0x00001f9c vaddr 0x00020f9c paddr 0x00021270 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00002544 vaddr 0x00021544 paddr 0x00021544 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00020020  00020020  00002270  2**0
                  CONTENTS
  2 .text         00000f48  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000034  00020f68  00020f68  00001f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  00020f9c  00021270  00001f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00021544  00021544  00002544  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00021554  00021554  00002270  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000418  00000000  00000000  00002298  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004ec0  00000000  00000000  000026b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b85  00000000  00000000  00007570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002029  00000000  00000000  000090f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000734  00000000  00000000  0000b120  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000012d9  00000000  00000000  0000b854  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000065e  00000000  00000000  0000cb2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000f0  00000000  00000000  0000d190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0000e682  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000c  00000000  00000000  0000e685  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0000e691  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0000e692  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   00000004  00000000  00000000  0000e693  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    00000004  00000000  00000000  0000e697  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   00000004  00000000  00000000  0000e69b  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000008  00000000  00000000  0000e69f  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000002d  00000000  00000000  0000e6a7  2**0
                  CONTENTS, READONLY
 25 .jdi          00004e87  00000000  00000000  0000e6d4  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000372f5  00000000  00000000  0001355b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020020 l    d  .text	00000000 .text
00020f68 l    d  .rodata	00000000 .rodata
00020f9c l    d  .rwdata	00000000 .rwdata
00021544 l    d  .bss	00000000 .bss
00021554 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosLab3_bsp//obj/HAL/src/crt0.o
00020038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00020f9c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
0002026c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000203e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00020524 l     F .text	00000034 alt_dev_reg
0002107c l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00020828 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0002095c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00020988 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00020358 g     F .text	00000060 alt_main
000200ac g     F .text	00000080 _puts_r
00021270 g       *ABS*	00000000 __flash_rwdata_start
00020bcc g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00021544 g     O .bss	00000004 errno
0002154c g     O .bss	00000004 alt_argv
00029250 g       *ABS*	00000000 _gp
000203b8 g     F .text	00000030 usleep
000210d0 g     O .rwdata	00000180 alt_fd_list
00020f68 g       *ABS*	00000000 __DTOR_END__
0002012c g     F .text	00000014 puts
00020684 g     F .text	000000ec altera_avalon_jtag_uart_read
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00021268 g     O .rwdata	00000004 alt_max_fd
00021250 g     O .rwdata	00000004 _global_impure_ptr
00021554 g       *ABS*	00000000 __bss_end
000210a8 g     O .rwdata	00000028 alt_dev_null
0002093c g     F .text	00000020 alt_dcache_flush_all
00021270 g       *ABS*	00000000 __ram_rwdata_end
00021260 g     O .rwdata	00000008 alt_dev_list
00020424 g     F .text	00000100 write
00020f9c g       *ABS*	00000000 __ram_rodata_end
00021554 g       *ABS*	00000000 end
00020f68 g       *ABS*	00000000 __CTOR_LIST__
0003f400 g       *ABS*	00000000 __alt_stack_pointer
00020770 g     F .text	00000094 altera_avalon_jtag_uart_write
00020d7c g     F .text	00000190 __call_exitprocs
00020020 g     F .text	0000001c _start
00020590 g     F .text	00000034 alt_sys_init
00020c24 g     F .text	00000158 __register_exitproc
00020f0c g     F .text	00000028 .hidden __mulsi3
00020f9c g       *ABS*	00000000 __ram_rwdata_start
00020f68 g       *ABS*	00000000 __ram_rodata_start
000205c4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00020804 g     F .text	00000024 alt_busy_sleep
00021554 g       *ABS*	00000000 __alt_stack_base
000209c4 g     F .text	000000a4 alt_dev_llist_insert
0002015c g     F .text	000000b8 __sfvwrite_small_dev
00021544 g       *ABS*	00000000 __bss_start
0002003c g     F .text	00000070 main
00021550 g     O .bss	00000004 alt_envp
00020624 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002126c g     O .rwdata	00000004 alt_errno
00020f68 g       *ABS*	00000000 __CTOR_END__
00020f68 g       *ABS*	00000000 __flash_rodata_start
00020f68 g       *ABS*	00000000 __DTOR_LIST__
00020558 g     F .text	00000038 alt_irq_init
00020b48 g     F .text	00000084 alt_release_fd
00020bf0 g     F .text	00000014 atexit
00020214 g     F .text	00000058 _write_r
00021254 g     O .rwdata	00000004 _impure_ptr
00021548 g     O .bss	00000004 alt_argc
00020ac8 g     F .text	00000060 _do_dtors
00021258 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00021270 g       *ABS*	00000000 _edata
00021554 g       *ABS*	00000000 _end
00020020 g       *ABS*	00000000 __ram_exceptions_end
00020c04 g     F .text	00000020 exit
0003f400 g       *ABS*	00000000 __alt_data_end
00020f34 g     F .text	00000034 _exit
00020140 g     F .text	0000001c strlen
00020b28 g     F .text	00000020 alt_icache_flush_all
00020a68 g     F .text	00000060 _do_ctors
00020864 g     F .text	000000d8 close
000202d4 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08400814 	ori	at,at,32
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00020020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20020:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20024:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
   20028:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2002c:	d6a49414 	ori	gp,gp,37456
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20030:	00202d40 	call	202d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20034:	00203580 	call	20358 <alt_main>

00020038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20038:	003fff06 	br	20038 <alt_after_alt_main>

0002003c <main>:
//#define SIM

// LED Peripheral
#define REG_DATA_OFFSET 1

int main(void){
   2003c:	defffc04 	addi	sp,sp,-16
   20040:	dfc00315 	stw	ra,12(sp)
   20044:	df000215 	stw	fp,8(sp)
   20048:	df000204 	addi	fp,sp,8
  unsigned int led = 0;
   2004c:	e03ffe15 	stw	zero,-8(fp)
  unsigned int *p_led = (unsigned int *) PERIPHERAL_LED_0_BASE;
   20050:	00800134 	movhi	r2,4
   20054:	10840004 	addi	r2,r2,4096
   20058:	e0bfff15 	stw	r2,-4(fp)

#ifndef SIM
  printf("Embarcados++ \n");
   2005c:	010000b4 	movhi	r4,2
   20060:	2103da04 	addi	r4,r4,3944
   20064:	002012c0 	call	2012c <puts>
#endif

  while(1){
      if (led < 4){
   20068:	e0bffe17 	ldw	r2,-8(fp)
   2006c:	10800128 	cmpgeui	r2,r2,4
   20070:	10000c1e 	bne	r2,zero,200a4 <main+0x68>
          *(p_led+REG_DATA_OFFSET) = (0x1 << led++);
   20074:	e0bfff17 	ldw	r2,-4(fp)
   20078:	10c00104 	addi	r3,r2,4
   2007c:	e0bffe17 	ldw	r2,-8(fp)
   20080:	11000044 	addi	r4,r2,1
   20084:	e13ffe15 	stw	r4,-8(fp)
   20088:	01000044 	movi	r4,1
   2008c:	2084983a 	sll	r2,r4,r2
   20090:	18800015 	stw	r2,0(r3)
#ifndef SIM
          usleep(500000); // remover durante a simulação
   20094:	01000234 	movhi	r4,8
   20098:	21284804 	addi	r4,r4,-24288
   2009c:	00203b80 	call	203b8 <usleep>
   200a0:	003ff106 	br	20068 <main+0x2c>
#endif
      }
      else{
          led = 0;
   200a4:	e03ffe15 	stw	zero,-8(fp)
      }
  };
   200a8:	003fef06 	br	20068 <main+0x2c>

000200ac <_puts_r>:
   200ac:	defffd04 	addi	sp,sp,-12
   200b0:	dc000015 	stw	r16,0(sp)
   200b4:	2021883a 	mov	r16,r4
   200b8:	2809883a 	mov	r4,r5
   200bc:	dfc00215 	stw	ra,8(sp)
   200c0:	dc400115 	stw	r17,4(sp)
   200c4:	2823883a 	mov	r17,r5
   200c8:	00201400 	call	20140 <strlen>
   200cc:	81400217 	ldw	r5,8(r16)
   200d0:	010000b4 	movhi	r4,2
   200d4:	21005704 	addi	r4,r4,348
   200d8:	29000115 	stw	r4,4(r5)
   200dc:	100f883a 	mov	r7,r2
   200e0:	880d883a 	mov	r6,r17
   200e4:	8009883a 	mov	r4,r16
   200e8:	002015c0 	call	2015c <__sfvwrite_small_dev>
   200ec:	00ffffc4 	movi	r3,-1
   200f0:	10c00926 	beq	r2,r3,20118 <_puts_r+0x6c>
   200f4:	81400217 	ldw	r5,8(r16)
   200f8:	018000b4 	movhi	r6,2
   200fc:	01c00044 	movi	r7,1
   20100:	28800117 	ldw	r2,4(r5)
   20104:	3183de04 	addi	r6,r6,3960
   20108:	8009883a 	mov	r4,r16
   2010c:	103ee83a 	callr	r2
   20110:	10bfffe0 	cmpeqi	r2,r2,-1
   20114:	0085c83a 	sub	r2,zero,r2
   20118:	dfc00217 	ldw	ra,8(sp)
   2011c:	dc400117 	ldw	r17,4(sp)
   20120:	dc000017 	ldw	r16,0(sp)
   20124:	dec00304 	addi	sp,sp,12
   20128:	f800283a 	ret

0002012c <puts>:
   2012c:	008000b4 	movhi	r2,2
   20130:	10849504 	addi	r2,r2,4692
   20134:	200b883a 	mov	r5,r4
   20138:	11000017 	ldw	r4,0(r2)
   2013c:	00200ac1 	jmpi	200ac <_puts_r>

00020140 <strlen>:
   20140:	2005883a 	mov	r2,r4
   20144:	10c00007 	ldb	r3,0(r2)
   20148:	18000226 	beq	r3,zero,20154 <strlen+0x14>
   2014c:	10800044 	addi	r2,r2,1
   20150:	003ffc06 	br	20144 <strlen+0x4>
   20154:	1105c83a 	sub	r2,r2,r4
   20158:	f800283a 	ret

0002015c <__sfvwrite_small_dev>:
   2015c:	2880000b 	ldhu	r2,0(r5)
   20160:	1080020c 	andi	r2,r2,8
   20164:	10002126 	beq	r2,zero,201ec <__sfvwrite_small_dev+0x90>
   20168:	2880008f 	ldh	r2,2(r5)
   2016c:	defffa04 	addi	sp,sp,-24
   20170:	dc000015 	stw	r16,0(sp)
   20174:	dfc00515 	stw	ra,20(sp)
   20178:	dd000415 	stw	r20,16(sp)
   2017c:	dcc00315 	stw	r19,12(sp)
   20180:	dc800215 	stw	r18,8(sp)
   20184:	dc400115 	stw	r17,4(sp)
   20188:	2821883a 	mov	r16,r5
   2018c:	10001216 	blt	r2,zero,201d8 <__sfvwrite_small_dev+0x7c>
   20190:	2027883a 	mov	r19,r4
   20194:	3025883a 	mov	r18,r6
   20198:	3823883a 	mov	r17,r7
   2019c:	05010004 	movi	r20,1024
   201a0:	04400b0e 	bge	zero,r17,201d0 <__sfvwrite_small_dev+0x74>
   201a4:	880f883a 	mov	r7,r17
   201a8:	a440010e 	bge	r20,r17,201b0 <__sfvwrite_small_dev+0x54>
   201ac:	01c10004 	movi	r7,1024
   201b0:	8140008f 	ldh	r5,2(r16)
   201b4:	900d883a 	mov	r6,r18
   201b8:	9809883a 	mov	r4,r19
   201bc:	00202140 	call	20214 <_write_r>
   201c0:	0080050e 	bge	zero,r2,201d8 <__sfvwrite_small_dev+0x7c>
   201c4:	88a3c83a 	sub	r17,r17,r2
   201c8:	90a5883a 	add	r18,r18,r2
   201cc:	003ff406 	br	201a0 <__sfvwrite_small_dev+0x44>
   201d0:	0005883a 	mov	r2,zero
   201d4:	00000706 	br	201f4 <__sfvwrite_small_dev+0x98>
   201d8:	8080000b 	ldhu	r2,0(r16)
   201dc:	10801014 	ori	r2,r2,64
   201e0:	8080000d 	sth	r2,0(r16)
   201e4:	00bfffc4 	movi	r2,-1
   201e8:	00000206 	br	201f4 <__sfvwrite_small_dev+0x98>
   201ec:	00bfffc4 	movi	r2,-1
   201f0:	f800283a 	ret
   201f4:	dfc00517 	ldw	ra,20(sp)
   201f8:	dd000417 	ldw	r20,16(sp)
   201fc:	dcc00317 	ldw	r19,12(sp)
   20200:	dc800217 	ldw	r18,8(sp)
   20204:	dc400117 	ldw	r17,4(sp)
   20208:	dc000017 	ldw	r16,0(sp)
   2020c:	dec00604 	addi	sp,sp,24
   20210:	f800283a 	ret

00020214 <_write_r>:
   20214:	defffd04 	addi	sp,sp,-12
   20218:	dc000015 	stw	r16,0(sp)
   2021c:	040000b4 	movhi	r16,2
   20220:	dc400115 	stw	r17,4(sp)
   20224:	84055104 	addi	r16,r16,5444
   20228:	2023883a 	mov	r17,r4
   2022c:	2809883a 	mov	r4,r5
   20230:	300b883a 	mov	r5,r6
   20234:	380d883a 	mov	r6,r7
   20238:	dfc00215 	stw	ra,8(sp)
   2023c:	80000015 	stw	zero,0(r16)
   20240:	00204240 	call	20424 <write>
   20244:	00ffffc4 	movi	r3,-1
   20248:	10c0031e 	bne	r2,r3,20258 <_write_r+0x44>
   2024c:	80c00017 	ldw	r3,0(r16)
   20250:	18000126 	beq	r3,zero,20258 <_write_r+0x44>
   20254:	88c00015 	stw	r3,0(r17)
   20258:	dfc00217 	ldw	ra,8(sp)
   2025c:	dc400117 	ldw	r17,4(sp)
   20260:	dc000017 	ldw	r16,0(sp)
   20264:	dec00304 	addi	sp,sp,12
   20268:	f800283a 	ret

0002026c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2026c:	defffc04 	addi	sp,sp,-16
   20270:	df000315 	stw	fp,12(sp)
   20274:	df000304 	addi	fp,sp,12
   20278:	e13ffd15 	stw	r4,-12(fp)
   2027c:	e17ffe15 	stw	r5,-8(fp)
   20280:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   20284:	e0fffe17 	ldw	r3,-8(fp)
   20288:	e0bffd17 	ldw	r2,-12(fp)
   2028c:	18800c26 	beq	r3,r2,202c0 <alt_load_section+0x54>
  {
    while( to != end )
   20290:	00000806 	br	202b4 <alt_load_section+0x48>
    {
      *to++ = *from++;
   20294:	e0bffe17 	ldw	r2,-8(fp)
   20298:	10c00104 	addi	r3,r2,4
   2029c:	e0fffe15 	stw	r3,-8(fp)
   202a0:	e0fffd17 	ldw	r3,-12(fp)
   202a4:	19000104 	addi	r4,r3,4
   202a8:	e13ffd15 	stw	r4,-12(fp)
   202ac:	18c00017 	ldw	r3,0(r3)
   202b0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   202b4:	e0fffe17 	ldw	r3,-8(fp)
   202b8:	e0bfff17 	ldw	r2,-4(fp)
   202bc:	18bff51e 	bne	r3,r2,20294 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   202c0:	0001883a 	nop
   202c4:	e037883a 	mov	sp,fp
   202c8:	df000017 	ldw	fp,0(sp)
   202cc:	dec00104 	addi	sp,sp,4
   202d0:	f800283a 	ret

000202d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   202d4:	defffe04 	addi	sp,sp,-8
   202d8:	dfc00115 	stw	ra,4(sp)
   202dc:	df000015 	stw	fp,0(sp)
   202e0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   202e4:	018000b4 	movhi	r6,2
   202e8:	31849c04 	addi	r6,r6,4720
   202ec:	014000b4 	movhi	r5,2
   202f0:	2943e704 	addi	r5,r5,3996
   202f4:	010000b4 	movhi	r4,2
   202f8:	21049c04 	addi	r4,r4,4720
   202fc:	002026c0 	call	2026c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   20300:	018000b4 	movhi	r6,2
   20304:	31800804 	addi	r6,r6,32
   20308:	014000b4 	movhi	r5,2
   2030c:	29400804 	addi	r5,r5,32
   20310:	010000b4 	movhi	r4,2
   20314:	21000804 	addi	r4,r4,32
   20318:	002026c0 	call	2026c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2031c:	018000b4 	movhi	r6,2
   20320:	3183e704 	addi	r6,r6,3996
   20324:	014000b4 	movhi	r5,2
   20328:	2943da04 	addi	r5,r5,3944
   2032c:	010000b4 	movhi	r4,2
   20330:	2103da04 	addi	r4,r4,3944
   20334:	002026c0 	call	2026c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20338:	002093c0 	call	2093c <alt_dcache_flush_all>
  alt_icache_flush_all();
   2033c:	0020b280 	call	20b28 <alt_icache_flush_all>
}
   20340:	0001883a 	nop
   20344:	e037883a 	mov	sp,fp
   20348:	dfc00117 	ldw	ra,4(sp)
   2034c:	df000017 	ldw	fp,0(sp)
   20350:	dec00204 	addi	sp,sp,8
   20354:	f800283a 	ret

00020358 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20358:	defffd04 	addi	sp,sp,-12
   2035c:	dfc00215 	stw	ra,8(sp)
   20360:	df000115 	stw	fp,4(sp)
   20364:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20368:	0009883a 	mov	r4,zero
   2036c:	00205580 	call	20558 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   20370:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20374:	00205900 	call	20590 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   20378:	0020a680 	call	20a68 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2037c:	010000b4 	movhi	r4,2
   20380:	2102b204 	addi	r4,r4,2760
   20384:	0020bf00 	call	20bf0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   20388:	d0a0be17 	ldw	r2,-32008(gp)
   2038c:	d0e0bf17 	ldw	r3,-32004(gp)
   20390:	d120c017 	ldw	r4,-32000(gp)
   20394:	200d883a 	mov	r6,r4
   20398:	180b883a 	mov	r5,r3
   2039c:	1009883a 	mov	r4,r2
   203a0:	002003c0 	call	2003c <main>
   203a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   203a8:	01000044 	movi	r4,1
   203ac:	00208640 	call	20864 <close>
  exit (result);
   203b0:	e13fff17 	ldw	r4,-4(fp)
   203b4:	0020c040 	call	20c04 <exit>

000203b8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   203b8:	defffd04 	addi	sp,sp,-12
   203bc:	dfc00215 	stw	ra,8(sp)
   203c0:	df000115 	stw	fp,4(sp)
   203c4:	df000104 	addi	fp,sp,4
   203c8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   203cc:	e13fff17 	ldw	r4,-4(fp)
   203d0:	00208040 	call	20804 <alt_busy_sleep>
}
   203d4:	e037883a 	mov	sp,fp
   203d8:	dfc00117 	ldw	ra,4(sp)
   203dc:	df000017 	ldw	fp,0(sp)
   203e0:	dec00204 	addi	sp,sp,8
   203e4:	f800283a 	ret

000203e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   203e8:	defffe04 	addi	sp,sp,-8
   203ec:	dfc00115 	stw	ra,4(sp)
   203f0:	df000015 	stw	fp,0(sp)
   203f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   203f8:	d0a00717 	ldw	r2,-32740(gp)
   203fc:	10000326 	beq	r2,zero,2040c <alt_get_errno+0x24>
   20400:	d0a00717 	ldw	r2,-32740(gp)
   20404:	103ee83a 	callr	r2
   20408:	00000106 	br	20410 <alt_get_errno+0x28>
   2040c:	d0a0bd04 	addi	r2,gp,-32012
}
   20410:	e037883a 	mov	sp,fp
   20414:	dfc00117 	ldw	ra,4(sp)
   20418:	df000017 	ldw	fp,0(sp)
   2041c:	dec00204 	addi	sp,sp,8
   20420:	f800283a 	ret

00020424 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   20424:	defff904 	addi	sp,sp,-28
   20428:	dfc00615 	stw	ra,24(sp)
   2042c:	df000515 	stw	fp,20(sp)
   20430:	df000504 	addi	fp,sp,20
   20434:	e13ffd15 	stw	r4,-12(fp)
   20438:	e17ffe15 	stw	r5,-8(fp)
   2043c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   20440:	e0bffd17 	ldw	r2,-12(fp)
   20444:	10000816 	blt	r2,zero,20468 <write+0x44>
   20448:	01400304 	movi	r5,12
   2044c:	e13ffd17 	ldw	r4,-12(fp)
   20450:	0020f0c0 	call	20f0c <__mulsi3>
   20454:	1007883a 	mov	r3,r2
   20458:	008000b4 	movhi	r2,2
   2045c:	10843404 	addi	r2,r2,4304
   20460:	1885883a 	add	r2,r3,r2
   20464:	00000106 	br	2046c <write+0x48>
   20468:	0005883a 	mov	r2,zero
   2046c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   20470:	e0bffb17 	ldw	r2,-20(fp)
   20474:	10002126 	beq	r2,zero,204fc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   20478:	e0bffb17 	ldw	r2,-20(fp)
   2047c:	10800217 	ldw	r2,8(r2)
   20480:	108000cc 	andi	r2,r2,3
   20484:	10001826 	beq	r2,zero,204e8 <write+0xc4>
   20488:	e0bffb17 	ldw	r2,-20(fp)
   2048c:	10800017 	ldw	r2,0(r2)
   20490:	10800617 	ldw	r2,24(r2)
   20494:	10001426 	beq	r2,zero,204e8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   20498:	e0bffb17 	ldw	r2,-20(fp)
   2049c:	10800017 	ldw	r2,0(r2)
   204a0:	10800617 	ldw	r2,24(r2)
   204a4:	e0ffff17 	ldw	r3,-4(fp)
   204a8:	180d883a 	mov	r6,r3
   204ac:	e17ffe17 	ldw	r5,-8(fp)
   204b0:	e13ffb17 	ldw	r4,-20(fp)
   204b4:	103ee83a 	callr	r2
   204b8:	e0bffc15 	stw	r2,-16(fp)
   204bc:	e0bffc17 	ldw	r2,-16(fp)
   204c0:	1000070e 	bge	r2,zero,204e0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   204c4:	00203e80 	call	203e8 <alt_get_errno>
   204c8:	1007883a 	mov	r3,r2
   204cc:	e0bffc17 	ldw	r2,-16(fp)
   204d0:	0085c83a 	sub	r2,zero,r2
   204d4:	18800015 	stw	r2,0(r3)
        return -1;
   204d8:	00bfffc4 	movi	r2,-1
   204dc:	00000c06 	br	20510 <write+0xec>
      }
      return rval;
   204e0:	e0bffc17 	ldw	r2,-16(fp)
   204e4:	00000a06 	br	20510 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   204e8:	00203e80 	call	203e8 <alt_get_errno>
   204ec:	1007883a 	mov	r3,r2
   204f0:	00800344 	movi	r2,13
   204f4:	18800015 	stw	r2,0(r3)
   204f8:	00000406 	br	2050c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   204fc:	00203e80 	call	203e8 <alt_get_errno>
   20500:	1007883a 	mov	r3,r2
   20504:	00801444 	movi	r2,81
   20508:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2050c:	00bfffc4 	movi	r2,-1
}
   20510:	e037883a 	mov	sp,fp
   20514:	dfc00117 	ldw	ra,4(sp)
   20518:	df000017 	ldw	fp,0(sp)
   2051c:	dec00204 	addi	sp,sp,8
   20520:	f800283a 	ret

00020524 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   20524:	defffd04 	addi	sp,sp,-12
   20528:	dfc00215 	stw	ra,8(sp)
   2052c:	df000115 	stw	fp,4(sp)
   20530:	df000104 	addi	fp,sp,4
   20534:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   20538:	d1600404 	addi	r5,gp,-32752
   2053c:	e13fff17 	ldw	r4,-4(fp)
   20540:	00209c40 	call	209c4 <alt_dev_llist_insert>
}
   20544:	e037883a 	mov	sp,fp
   20548:	dfc00117 	ldw	ra,4(sp)
   2054c:	df000017 	ldw	fp,0(sp)
   20550:	dec00204 	addi	sp,sp,8
   20554:	f800283a 	ret

00020558 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20558:	defffd04 	addi	sp,sp,-12
   2055c:	dfc00215 	stw	ra,8(sp)
   20560:	df000115 	stw	fp,4(sp)
   20564:	df000104 	addi	fp,sp,4
   20568:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   2056c:	0020bcc0 	call	20bcc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20570:	00800044 	movi	r2,1
   20574:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20578:	0001883a 	nop
   2057c:	e037883a 	mov	sp,fp
   20580:	dfc00117 	ldw	ra,4(sp)
   20584:	df000017 	ldw	fp,0(sp)
   20588:	dec00204 	addi	sp,sp,8
   2058c:	f800283a 	ret

00020590 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   20590:	defffe04 	addi	sp,sp,-8
   20594:	dfc00115 	stw	ra,4(sp)
   20598:	df000015 	stw	fp,0(sp)
   2059c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   205a0:	010000b4 	movhi	r4,2
   205a4:	21041f04 	addi	r4,r4,4220
   205a8:	00205240 	call	20524 <alt_dev_reg>
}
   205ac:	0001883a 	nop
   205b0:	e037883a 	mov	sp,fp
   205b4:	dfc00117 	ldw	ra,4(sp)
   205b8:	df000017 	ldw	fp,0(sp)
   205bc:	dec00204 	addi	sp,sp,8
   205c0:	f800283a 	ret

000205c4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   205c4:	defffa04 	addi	sp,sp,-24
   205c8:	dfc00515 	stw	ra,20(sp)
   205cc:	df000415 	stw	fp,16(sp)
   205d0:	df000404 	addi	fp,sp,16
   205d4:	e13ffd15 	stw	r4,-12(fp)
   205d8:	e17ffe15 	stw	r5,-8(fp)
   205dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   205e0:	e0bffd17 	ldw	r2,-12(fp)
   205e4:	10800017 	ldw	r2,0(r2)
   205e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   205ec:	e0bffc17 	ldw	r2,-16(fp)
   205f0:	10c00a04 	addi	r3,r2,40
   205f4:	e0bffd17 	ldw	r2,-12(fp)
   205f8:	10800217 	ldw	r2,8(r2)
   205fc:	100f883a 	mov	r7,r2
   20600:	e1bfff17 	ldw	r6,-4(fp)
   20604:	e17ffe17 	ldw	r5,-8(fp)
   20608:	1809883a 	mov	r4,r3
   2060c:	00206840 	call	20684 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   20610:	e037883a 	mov	sp,fp
   20614:	dfc00117 	ldw	ra,4(sp)
   20618:	df000017 	ldw	fp,0(sp)
   2061c:	dec00204 	addi	sp,sp,8
   20620:	f800283a 	ret

00020624 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   20624:	defffa04 	addi	sp,sp,-24
   20628:	dfc00515 	stw	ra,20(sp)
   2062c:	df000415 	stw	fp,16(sp)
   20630:	df000404 	addi	fp,sp,16
   20634:	e13ffd15 	stw	r4,-12(fp)
   20638:	e17ffe15 	stw	r5,-8(fp)
   2063c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20640:	e0bffd17 	ldw	r2,-12(fp)
   20644:	10800017 	ldw	r2,0(r2)
   20648:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2064c:	e0bffc17 	ldw	r2,-16(fp)
   20650:	10c00a04 	addi	r3,r2,40
   20654:	e0bffd17 	ldw	r2,-12(fp)
   20658:	10800217 	ldw	r2,8(r2)
   2065c:	100f883a 	mov	r7,r2
   20660:	e1bfff17 	ldw	r6,-4(fp)
   20664:	e17ffe17 	ldw	r5,-8(fp)
   20668:	1809883a 	mov	r4,r3
   2066c:	00207700 	call	20770 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   20670:	e037883a 	mov	sp,fp
   20674:	dfc00117 	ldw	ra,4(sp)
   20678:	df000017 	ldw	fp,0(sp)
   2067c:	dec00204 	addi	sp,sp,8
   20680:	f800283a 	ret

00020684 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   20684:	defff704 	addi	sp,sp,-36
   20688:	df000815 	stw	fp,32(sp)
   2068c:	df000804 	addi	fp,sp,32
   20690:	e13ffc15 	stw	r4,-16(fp)
   20694:	e17ffd15 	stw	r5,-12(fp)
   20698:	e1bffe15 	stw	r6,-8(fp)
   2069c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   206a0:	e0bffc17 	ldw	r2,-16(fp)
   206a4:	10800017 	ldw	r2,0(r2)
   206a8:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   206ac:	e0bffd17 	ldw	r2,-12(fp)
   206b0:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   206b4:	e0bffe17 	ldw	r2,-8(fp)
   206b8:	e0fffd17 	ldw	r3,-12(fp)
   206bc:	1885883a 	add	r2,r3,r2
   206c0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   206c4:	00001206 	br	20710 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   206c8:	e0bff917 	ldw	r2,-28(fp)
   206cc:	10800037 	ldwio	r2,0(r2)
   206d0:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   206d4:	e0bffb17 	ldw	r2,-20(fp)
   206d8:	10a0000c 	andi	r2,r2,32768
   206dc:	10000626 	beq	r2,zero,206f8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   206e0:	e0bff817 	ldw	r2,-32(fp)
   206e4:	10c00044 	addi	r3,r2,1
   206e8:	e0fff815 	stw	r3,-32(fp)
   206ec:	e0fffb17 	ldw	r3,-20(fp)
   206f0:	10c00005 	stb	r3,0(r2)
   206f4:	00000606 	br	20710 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   206f8:	e0fff817 	ldw	r3,-32(fp)
   206fc:	e0bffd17 	ldw	r2,-12(fp)
   20700:	1880071e 	bne	r3,r2,20720 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   20704:	e0bfff17 	ldw	r2,-4(fp)
   20708:	1090000c 	andi	r2,r2,16384
   2070c:	1000061e 	bne	r2,zero,20728 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   20710:	e0fff817 	ldw	r3,-32(fp)
   20714:	e0bffa17 	ldw	r2,-24(fp)
   20718:	18bfeb36 	bltu	r3,r2,206c8 <altera_avalon_jtag_uart_read+0x44>
   2071c:	00000306 	br	2072c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   20720:	0001883a 	nop
   20724:	00000106 	br	2072c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   20728:	0001883a 	nop
    
  }

  if (ptr != buffer)
   2072c:	e0fff817 	ldw	r3,-32(fp)
   20730:	e0bffd17 	ldw	r2,-12(fp)
   20734:	18800426 	beq	r3,r2,20748 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   20738:	e0fff817 	ldw	r3,-32(fp)
   2073c:	e0bffd17 	ldw	r2,-12(fp)
   20740:	1885c83a 	sub	r2,r3,r2
   20744:	00000606 	br	20760 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   20748:	e0bfff17 	ldw	r2,-4(fp)
   2074c:	1090000c 	andi	r2,r2,16384
   20750:	10000226 	beq	r2,zero,2075c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   20754:	00bffd44 	movi	r2,-11
   20758:	00000106 	br	20760 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   2075c:	00bffec4 	movi	r2,-5
}
   20760:	e037883a 	mov	sp,fp
   20764:	df000017 	ldw	fp,0(sp)
   20768:	dec00104 	addi	sp,sp,4
   2076c:	f800283a 	ret

00020770 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   20770:	defff904 	addi	sp,sp,-28
   20774:	df000615 	stw	fp,24(sp)
   20778:	df000604 	addi	fp,sp,24
   2077c:	e13ffc15 	stw	r4,-16(fp)
   20780:	e17ffd15 	stw	r5,-12(fp)
   20784:	e1bffe15 	stw	r6,-8(fp)
   20788:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   2078c:	e0bffc17 	ldw	r2,-16(fp)
   20790:	10800017 	ldw	r2,0(r2)
   20794:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   20798:	e0bffe17 	ldw	r2,-8(fp)
   2079c:	e0fffd17 	ldw	r3,-12(fp)
   207a0:	1885883a 	add	r2,r3,r2
   207a4:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   207a8:	00000e06 	br	207e4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   207ac:	e0bffa17 	ldw	r2,-24(fp)
   207b0:	10800104 	addi	r2,r2,4
   207b4:	10800037 	ldwio	r2,0(r2)
   207b8:	10bfffec 	andhi	r2,r2,65535
   207bc:	10000926 	beq	r2,zero,207e4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   207c0:	e0fffa17 	ldw	r3,-24(fp)
   207c4:	e0bffd17 	ldw	r2,-12(fp)
   207c8:	11000044 	addi	r4,r2,1
   207cc:	e13ffd15 	stw	r4,-12(fp)
   207d0:	10800003 	ldbu	r2,0(r2)
   207d4:	10803fcc 	andi	r2,r2,255
   207d8:	1080201c 	xori	r2,r2,128
   207dc:	10bfe004 	addi	r2,r2,-128
   207e0:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   207e4:	e0fffd17 	ldw	r3,-12(fp)
   207e8:	e0bffb17 	ldw	r2,-20(fp)
   207ec:	18bfef36 	bltu	r3,r2,207ac <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   207f0:	e0bffe17 	ldw	r2,-8(fp)
}
   207f4:	e037883a 	mov	sp,fp
   207f8:	df000017 	ldw	fp,0(sp)
   207fc:	dec00104 	addi	sp,sp,4
   20800:	f800283a 	ret

00020804 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   20804:	defffe04 	addi	sp,sp,-8
   20808:	df000115 	stw	fp,4(sp)
   2080c:	df000104 	addi	fp,sp,4
   20810:	e13fff15 	stw	r4,-4(fp)
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   20814:	0005883a 	mov	r2,zero
}
   20818:	e037883a 	mov	sp,fp
   2081c:	df000017 	ldw	fp,0(sp)
   20820:	dec00104 	addi	sp,sp,4
   20824:	f800283a 	ret

00020828 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20828:	defffe04 	addi	sp,sp,-8
   2082c:	dfc00115 	stw	ra,4(sp)
   20830:	df000015 	stw	fp,0(sp)
   20834:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20838:	d0a00717 	ldw	r2,-32740(gp)
   2083c:	10000326 	beq	r2,zero,2084c <alt_get_errno+0x24>
   20840:	d0a00717 	ldw	r2,-32740(gp)
   20844:	103ee83a 	callr	r2
   20848:	00000106 	br	20850 <alt_get_errno+0x28>
   2084c:	d0a0bd04 	addi	r2,gp,-32012
}
   20850:	e037883a 	mov	sp,fp
   20854:	dfc00117 	ldw	ra,4(sp)
   20858:	df000017 	ldw	fp,0(sp)
   2085c:	dec00204 	addi	sp,sp,8
   20860:	f800283a 	ret

00020864 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   20864:	defffb04 	addi	sp,sp,-20
   20868:	dfc00415 	stw	ra,16(sp)
   2086c:	df000315 	stw	fp,12(sp)
   20870:	df000304 	addi	fp,sp,12
   20874:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   20878:	e0bfff17 	ldw	r2,-4(fp)
   2087c:	10000816 	blt	r2,zero,208a0 <close+0x3c>
   20880:	01400304 	movi	r5,12
   20884:	e13fff17 	ldw	r4,-4(fp)
   20888:	0020f0c0 	call	20f0c <__mulsi3>
   2088c:	1007883a 	mov	r3,r2
   20890:	008000b4 	movhi	r2,2
   20894:	10843404 	addi	r2,r2,4304
   20898:	1885883a 	add	r2,r3,r2
   2089c:	00000106 	br	208a4 <close+0x40>
   208a0:	0005883a 	mov	r2,zero
   208a4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   208a8:	e0bffd17 	ldw	r2,-12(fp)
   208ac:	10001926 	beq	r2,zero,20914 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   208b0:	e0bffd17 	ldw	r2,-12(fp)
   208b4:	10800017 	ldw	r2,0(r2)
   208b8:	10800417 	ldw	r2,16(r2)
   208bc:	10000626 	beq	r2,zero,208d8 <close+0x74>
   208c0:	e0bffd17 	ldw	r2,-12(fp)
   208c4:	10800017 	ldw	r2,0(r2)
   208c8:	10800417 	ldw	r2,16(r2)
   208cc:	e13ffd17 	ldw	r4,-12(fp)
   208d0:	103ee83a 	callr	r2
   208d4:	00000106 	br	208dc <close+0x78>
   208d8:	0005883a 	mov	r2,zero
   208dc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   208e0:	e13fff17 	ldw	r4,-4(fp)
   208e4:	0020b480 	call	20b48 <alt_release_fd>
    if (rval < 0)
   208e8:	e0bffe17 	ldw	r2,-8(fp)
   208ec:	1000070e 	bge	r2,zero,2090c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   208f0:	00208280 	call	20828 <alt_get_errno>
   208f4:	1007883a 	mov	r3,r2
   208f8:	e0bffe17 	ldw	r2,-8(fp)
   208fc:	0085c83a 	sub	r2,zero,r2
   20900:	18800015 	stw	r2,0(r3)
      return -1;
   20904:	00bfffc4 	movi	r2,-1
   20908:	00000706 	br	20928 <close+0xc4>
    }
    return 0;
   2090c:	0005883a 	mov	r2,zero
   20910:	00000506 	br	20928 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   20914:	00208280 	call	20828 <alt_get_errno>
   20918:	1007883a 	mov	r3,r2
   2091c:	00801444 	movi	r2,81
   20920:	18800015 	stw	r2,0(r3)
    return -1;
   20924:	00bfffc4 	movi	r2,-1
  }
}
   20928:	e037883a 	mov	sp,fp
   2092c:	dfc00117 	ldw	ra,4(sp)
   20930:	df000017 	ldw	fp,0(sp)
   20934:	dec00204 	addi	sp,sp,8
   20938:	f800283a 	ret

0002093c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2093c:	deffff04 	addi	sp,sp,-4
   20940:	df000015 	stw	fp,0(sp)
   20944:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   20948:	0001883a 	nop
   2094c:	e037883a 	mov	sp,fp
   20950:	df000017 	ldw	fp,0(sp)
   20954:	dec00104 	addi	sp,sp,4
   20958:	f800283a 	ret

0002095c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2095c:	defffc04 	addi	sp,sp,-16
   20960:	df000315 	stw	fp,12(sp)
   20964:	df000304 	addi	fp,sp,12
   20968:	e13ffd15 	stw	r4,-12(fp)
   2096c:	e17ffe15 	stw	r5,-8(fp)
   20970:	e1bfff15 	stw	r6,-4(fp)
  return len;
   20974:	e0bfff17 	ldw	r2,-4(fp)
}
   20978:	e037883a 	mov	sp,fp
   2097c:	df000017 	ldw	fp,0(sp)
   20980:	dec00104 	addi	sp,sp,4
   20984:	f800283a 	ret

00020988 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20988:	defffe04 	addi	sp,sp,-8
   2098c:	dfc00115 	stw	ra,4(sp)
   20990:	df000015 	stw	fp,0(sp)
   20994:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20998:	d0a00717 	ldw	r2,-32740(gp)
   2099c:	10000326 	beq	r2,zero,209ac <alt_get_errno+0x24>
   209a0:	d0a00717 	ldw	r2,-32740(gp)
   209a4:	103ee83a 	callr	r2
   209a8:	00000106 	br	209b0 <alt_get_errno+0x28>
   209ac:	d0a0bd04 	addi	r2,gp,-32012
}
   209b0:	e037883a 	mov	sp,fp
   209b4:	dfc00117 	ldw	ra,4(sp)
   209b8:	df000017 	ldw	fp,0(sp)
   209bc:	dec00204 	addi	sp,sp,8
   209c0:	f800283a 	ret

000209c4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   209c4:	defffa04 	addi	sp,sp,-24
   209c8:	dfc00515 	stw	ra,20(sp)
   209cc:	df000415 	stw	fp,16(sp)
   209d0:	df000404 	addi	fp,sp,16
   209d4:	e13ffe15 	stw	r4,-8(fp)
   209d8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   209dc:	e0bffe17 	ldw	r2,-8(fp)
   209e0:	10000326 	beq	r2,zero,209f0 <alt_dev_llist_insert+0x2c>
   209e4:	e0bffe17 	ldw	r2,-8(fp)
   209e8:	10800217 	ldw	r2,8(r2)
   209ec:	1000061e 	bne	r2,zero,20a08 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   209f0:	00209880 	call	20988 <alt_get_errno>
   209f4:	1007883a 	mov	r3,r2
   209f8:	00800584 	movi	r2,22
   209fc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   20a00:	00bffa84 	movi	r2,-22
   20a04:	00001306 	br	20a54 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   20a08:	e0bffe17 	ldw	r2,-8(fp)
   20a0c:	e0ffff17 	ldw	r3,-4(fp)
   20a10:	e0fffc15 	stw	r3,-16(fp)
   20a14:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   20a18:	e0bffd17 	ldw	r2,-12(fp)
   20a1c:	e0fffc17 	ldw	r3,-16(fp)
   20a20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   20a24:	e0bffc17 	ldw	r2,-16(fp)
   20a28:	10c00017 	ldw	r3,0(r2)
   20a2c:	e0bffd17 	ldw	r2,-12(fp)
   20a30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   20a34:	e0bffc17 	ldw	r2,-16(fp)
   20a38:	10800017 	ldw	r2,0(r2)
   20a3c:	e0fffd17 	ldw	r3,-12(fp)
   20a40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   20a44:	e0bffc17 	ldw	r2,-16(fp)
   20a48:	e0fffd17 	ldw	r3,-12(fp)
   20a4c:	10c00015 	stw	r3,0(r2)

  return 0;  
   20a50:	0005883a 	mov	r2,zero
}
   20a54:	e037883a 	mov	sp,fp
   20a58:	dfc00117 	ldw	ra,4(sp)
   20a5c:	df000017 	ldw	fp,0(sp)
   20a60:	dec00204 	addi	sp,sp,8
   20a64:	f800283a 	ret

00020a68 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   20a68:	defffd04 	addi	sp,sp,-12
   20a6c:	dfc00215 	stw	ra,8(sp)
   20a70:	df000115 	stw	fp,4(sp)
   20a74:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   20a78:	008000b4 	movhi	r2,2
   20a7c:	1083d904 	addi	r2,r2,3940
   20a80:	e0bfff15 	stw	r2,-4(fp)
   20a84:	00000606 	br	20aa0 <_do_ctors+0x38>
        (*ctor) (); 
   20a88:	e0bfff17 	ldw	r2,-4(fp)
   20a8c:	10800017 	ldw	r2,0(r2)
   20a90:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   20a94:	e0bfff17 	ldw	r2,-4(fp)
   20a98:	10bfff04 	addi	r2,r2,-4
   20a9c:	e0bfff15 	stw	r2,-4(fp)
   20aa0:	e0ffff17 	ldw	r3,-4(fp)
   20aa4:	008000b4 	movhi	r2,2
   20aa8:	1083da04 	addi	r2,r2,3944
   20aac:	18bff62e 	bgeu	r3,r2,20a88 <_do_ctors+0x20>
        (*ctor) (); 
}
   20ab0:	0001883a 	nop
   20ab4:	e037883a 	mov	sp,fp
   20ab8:	dfc00117 	ldw	ra,4(sp)
   20abc:	df000017 	ldw	fp,0(sp)
   20ac0:	dec00204 	addi	sp,sp,8
   20ac4:	f800283a 	ret

00020ac8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   20ac8:	defffd04 	addi	sp,sp,-12
   20acc:	dfc00215 	stw	ra,8(sp)
   20ad0:	df000115 	stw	fp,4(sp)
   20ad4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   20ad8:	008000b4 	movhi	r2,2
   20adc:	1083d904 	addi	r2,r2,3940
   20ae0:	e0bfff15 	stw	r2,-4(fp)
   20ae4:	00000606 	br	20b00 <_do_dtors+0x38>
        (*dtor) (); 
   20ae8:	e0bfff17 	ldw	r2,-4(fp)
   20aec:	10800017 	ldw	r2,0(r2)
   20af0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   20af4:	e0bfff17 	ldw	r2,-4(fp)
   20af8:	10bfff04 	addi	r2,r2,-4
   20afc:	e0bfff15 	stw	r2,-4(fp)
   20b00:	e0ffff17 	ldw	r3,-4(fp)
   20b04:	008000b4 	movhi	r2,2
   20b08:	1083da04 	addi	r2,r2,3944
   20b0c:	18bff62e 	bgeu	r3,r2,20ae8 <_do_dtors+0x20>
        (*dtor) (); 
}
   20b10:	0001883a 	nop
   20b14:	e037883a 	mov	sp,fp
   20b18:	dfc00117 	ldw	ra,4(sp)
   20b1c:	df000017 	ldw	fp,0(sp)
   20b20:	dec00204 	addi	sp,sp,8
   20b24:	f800283a 	ret

00020b28 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   20b28:	deffff04 	addi	sp,sp,-4
   20b2c:	df000015 	stw	fp,0(sp)
   20b30:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   20b34:	0001883a 	nop
   20b38:	e037883a 	mov	sp,fp
   20b3c:	df000017 	ldw	fp,0(sp)
   20b40:	dec00104 	addi	sp,sp,4
   20b44:	f800283a 	ret

00020b48 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   20b48:	defffc04 	addi	sp,sp,-16
   20b4c:	dfc00315 	stw	ra,12(sp)
   20b50:	df000215 	stw	fp,8(sp)
   20b54:	dc000115 	stw	r16,4(sp)
   20b58:	df000204 	addi	fp,sp,8
   20b5c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   20b60:	e0bffe17 	ldw	r2,-8(fp)
   20b64:	108000d0 	cmplti	r2,r2,3
   20b68:	1000111e 	bne	r2,zero,20bb0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   20b6c:	040000b4 	movhi	r16,2
   20b70:	84043404 	addi	r16,r16,4304
   20b74:	e0bffe17 	ldw	r2,-8(fp)
   20b78:	01400304 	movi	r5,12
   20b7c:	1009883a 	mov	r4,r2
   20b80:	0020f0c0 	call	20f0c <__mulsi3>
   20b84:	8085883a 	add	r2,r16,r2
   20b88:	10800204 	addi	r2,r2,8
   20b8c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   20b90:	040000b4 	movhi	r16,2
   20b94:	84043404 	addi	r16,r16,4304
   20b98:	e0bffe17 	ldw	r2,-8(fp)
   20b9c:	01400304 	movi	r5,12
   20ba0:	1009883a 	mov	r4,r2
   20ba4:	0020f0c0 	call	20f0c <__mulsi3>
   20ba8:	8085883a 	add	r2,r16,r2
   20bac:	10000015 	stw	zero,0(r2)
  }
}
   20bb0:	0001883a 	nop
   20bb4:	e6ffff04 	addi	sp,fp,-4
   20bb8:	dfc00217 	ldw	ra,8(sp)
   20bbc:	df000117 	ldw	fp,4(sp)
   20bc0:	dc000017 	ldw	r16,0(sp)
   20bc4:	dec00304 	addi	sp,sp,12
   20bc8:	f800283a 	ret

00020bcc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   20bcc:	deffff04 	addi	sp,sp,-4
   20bd0:	df000015 	stw	fp,0(sp)
   20bd4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   20bd8:	000170fa 	wrctl	ienable,zero
}
   20bdc:	0001883a 	nop
   20be0:	e037883a 	mov	sp,fp
   20be4:	df000017 	ldw	fp,0(sp)
   20be8:	dec00104 	addi	sp,sp,4
   20bec:	f800283a 	ret

00020bf0 <atexit>:
   20bf0:	200b883a 	mov	r5,r4
   20bf4:	000f883a 	mov	r7,zero
   20bf8:	000d883a 	mov	r6,zero
   20bfc:	0009883a 	mov	r4,zero
   20c00:	0020c241 	jmpi	20c24 <__register_exitproc>

00020c04 <exit>:
   20c04:	defffe04 	addi	sp,sp,-8
   20c08:	000b883a 	mov	r5,zero
   20c0c:	dc000015 	stw	r16,0(sp)
   20c10:	dfc00115 	stw	ra,4(sp)
   20c14:	2021883a 	mov	r16,r4
   20c18:	0020d7c0 	call	20d7c <__call_exitprocs>
   20c1c:	8009883a 	mov	r4,r16
   20c20:	0020f340 	call	20f34 <_exit>

00020c24 <__register_exitproc>:
   20c24:	008000b4 	movhi	r2,2
   20c28:	10849404 	addi	r2,r2,4688
   20c2c:	10c00017 	ldw	r3,0(r2)
   20c30:	defff904 	addi	sp,sp,-28
   20c34:	dc000015 	stw	r16,0(sp)
   20c38:	1c000c17 	ldw	r16,48(r3)
   20c3c:	dd400515 	stw	r21,20(sp)
   20c40:	dd000415 	stw	r20,16(sp)
   20c44:	dcc00315 	stw	r19,12(sp)
   20c48:	dc800215 	stw	r18,8(sp)
   20c4c:	dc400115 	stw	r17,4(sp)
   20c50:	dfc00615 	stw	ra,24(sp)
   20c54:	202b883a 	mov	r21,r4
   20c58:	2823883a 	mov	r17,r5
   20c5c:	3027883a 	mov	r19,r6
   20c60:	3825883a 	mov	r18,r7
   20c64:	1029883a 	mov	r20,r2
   20c68:	8000021e 	bne	r16,zero,20c74 <__register_exitproc+0x50>
   20c6c:	1c000d04 	addi	r16,r3,52
   20c70:	1c000c15 	stw	r16,48(r3)
   20c74:	80800117 	ldw	r2,4(r16)
   20c78:	00c007c4 	movi	r3,31
   20c7c:	1880110e 	bge	r3,r2,20cc4 <__register_exitproc+0xa0>
   20c80:	00800034 	movhi	r2,0
   20c84:	10800004 	addi	r2,r2,0
   20c88:	1000021e 	bne	r2,zero,20c94 <__register_exitproc+0x70>
   20c8c:	00bfffc4 	movi	r2,-1
   20c90:	00003106 	br	20d58 <__register_exitproc+0x134>
   20c94:	01002304 	movi	r4,140
   20c98:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   20c9c:	1021883a 	mov	r16,r2
   20ca0:	103ffa26 	beq	r2,zero,20c8c <__register_exitproc+0x68>
   20ca4:	10000115 	stw	zero,4(r2)
   20ca8:	a0800017 	ldw	r2,0(r20)
   20cac:	10c00c17 	ldw	r3,48(r2)
   20cb0:	80c00015 	stw	r3,0(r16)
   20cb4:	14000c15 	stw	r16,48(r2)
   20cb8:	80002215 	stw	zero,136(r16)
   20cbc:	a8001d26 	beq	r21,zero,20d34 <__register_exitproc+0x110>
   20cc0:	00000606 	br	20cdc <__register_exitproc+0xb8>
   20cc4:	a8001b26 	beq	r21,zero,20d34 <__register_exitproc+0x110>
   20cc8:	80802217 	ldw	r2,136(r16)
   20ccc:	1000091e 	bne	r2,zero,20cf4 <__register_exitproc+0xd0>
   20cd0:	00800034 	movhi	r2,0
   20cd4:	10800004 	addi	r2,r2,0
   20cd8:	103fec26 	beq	r2,zero,20c8c <__register_exitproc+0x68>
   20cdc:	01004204 	movi	r4,264
   20ce0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   20ce4:	103fe926 	beq	r2,zero,20c8c <__register_exitproc+0x68>
   20ce8:	10004015 	stw	zero,256(r2)
   20cec:	10004115 	stw	zero,260(r2)
   20cf0:	80802215 	stw	r2,136(r16)
   20cf4:	81400117 	ldw	r5,4(r16)
   20cf8:	01000044 	movi	r4,1
   20cfc:	2947883a 	add	r3,r5,r5
   20d00:	18c7883a 	add	r3,r3,r3
   20d04:	10c7883a 	add	r3,r2,r3
   20d08:	1cc00015 	stw	r19,0(r3)
   20d0c:	2148983a 	sll	r4,r4,r5
   20d10:	11404017 	ldw	r5,256(r2)
   20d14:	290ab03a 	or	r5,r5,r4
   20d18:	11404015 	stw	r5,256(r2)
   20d1c:	1c802015 	stw	r18,128(r3)
   20d20:	00c00084 	movi	r3,2
   20d24:	a8c0031e 	bne	r21,r3,20d34 <__register_exitproc+0x110>
   20d28:	10c04117 	ldw	r3,260(r2)
   20d2c:	1908b03a 	or	r4,r3,r4
   20d30:	11004115 	stw	r4,260(r2)
   20d34:	80800117 	ldw	r2,4(r16)
   20d38:	10c00044 	addi	r3,r2,1
   20d3c:	10800084 	addi	r2,r2,2
   20d40:	1085883a 	add	r2,r2,r2
   20d44:	1085883a 	add	r2,r2,r2
   20d48:	80c00115 	stw	r3,4(r16)
   20d4c:	80a1883a 	add	r16,r16,r2
   20d50:	84400015 	stw	r17,0(r16)
   20d54:	0005883a 	mov	r2,zero
   20d58:	dfc00617 	ldw	ra,24(sp)
   20d5c:	dd400517 	ldw	r21,20(sp)
   20d60:	dd000417 	ldw	r20,16(sp)
   20d64:	dcc00317 	ldw	r19,12(sp)
   20d68:	dc800217 	ldw	r18,8(sp)
   20d6c:	dc400117 	ldw	r17,4(sp)
   20d70:	dc000017 	ldw	r16,0(sp)
   20d74:	dec00704 	addi	sp,sp,28
   20d78:	f800283a 	ret

00020d7c <__call_exitprocs>:
   20d7c:	defff504 	addi	sp,sp,-44
   20d80:	dd000515 	stw	r20,20(sp)
   20d84:	050000b4 	movhi	r20,2
   20d88:	dc800315 	stw	r18,12(sp)
   20d8c:	dfc00a15 	stw	ra,40(sp)
   20d90:	df000915 	stw	fp,36(sp)
   20d94:	ddc00815 	stw	r23,32(sp)
   20d98:	dd800715 	stw	r22,28(sp)
   20d9c:	dd400615 	stw	r21,24(sp)
   20da0:	dcc00415 	stw	r19,16(sp)
   20da4:	dc400215 	stw	r17,8(sp)
   20da8:	dc000115 	stw	r16,4(sp)
   20dac:	d9000015 	stw	r4,0(sp)
   20db0:	2825883a 	mov	r18,r5
   20db4:	a5049404 	addi	r20,r20,4688
   20db8:	a4400017 	ldw	r17,0(r20)
   20dbc:	8cc00c17 	ldw	r19,48(r17)
   20dc0:	8c400c04 	addi	r17,r17,48
   20dc4:	98004526 	beq	r19,zero,20edc <__call_exitprocs+0x160>
   20dc8:	9c000117 	ldw	r16,4(r19)
   20dcc:	00900034 	movhi	r2,16384
   20dd0:	10bfffc4 	addi	r2,r2,-1
   20dd4:	9d402217 	ldw	r21,136(r19)
   20dd8:	85bfffc4 	addi	r22,r16,-1
   20ddc:	80a1883a 	add	r16,r16,r2
   20de0:	8421883a 	add	r16,r16,r16
   20de4:	8421883a 	add	r16,r16,r16
   20de8:	ac2f883a 	add	r23,r21,r16
   20dec:	84000204 	addi	r16,r16,8
   20df0:	9c21883a 	add	r16,r19,r16
   20df4:	b0002716 	blt	r22,zero,20e94 <__call_exitprocs+0x118>
   20df8:	90000726 	beq	r18,zero,20e18 <__call_exitprocs+0x9c>
   20dfc:	a800041e 	bne	r21,zero,20e10 <__call_exitprocs+0x94>
   20e00:	b5bfffc4 	addi	r22,r22,-1
   20e04:	bdffff04 	addi	r23,r23,-4
   20e08:	843fff04 	addi	r16,r16,-4
   20e0c:	003ff906 	br	20df4 <__call_exitprocs+0x78>
   20e10:	b9002017 	ldw	r4,128(r23)
   20e14:	913ffa1e 	bne	r18,r4,20e00 <__call_exitprocs+0x84>
   20e18:	99000117 	ldw	r4,4(r19)
   20e1c:	82000017 	ldw	r8,0(r16)
   20e20:	213fffc4 	addi	r4,r4,-1
   20e24:	b100021e 	bne	r22,r4,20e30 <__call_exitprocs+0xb4>
   20e28:	9d800115 	stw	r22,4(r19)
   20e2c:	00000106 	br	20e34 <__call_exitprocs+0xb8>
   20e30:	80000015 	stw	zero,0(r16)
   20e34:	403ff226 	beq	r8,zero,20e00 <__call_exitprocs+0x84>
   20e38:	9f000117 	ldw	fp,4(r19)
   20e3c:	a8000526 	beq	r21,zero,20e54 <__call_exitprocs+0xd8>
   20e40:	00800044 	movi	r2,1
   20e44:	1592983a 	sll	r9,r2,r22
   20e48:	a9404017 	ldw	r5,256(r21)
   20e4c:	494a703a 	and	r5,r9,r5
   20e50:	2800021e 	bne	r5,zero,20e5c <__call_exitprocs+0xe0>
   20e54:	403ee83a 	callr	r8
   20e58:	00000906 	br	20e80 <__call_exitprocs+0x104>
   20e5c:	a9004117 	ldw	r4,260(r21)
   20e60:	4908703a 	and	r4,r9,r4
   20e64:	2000041e 	bne	r4,zero,20e78 <__call_exitprocs+0xfc>
   20e68:	b9400017 	ldw	r5,0(r23)
   20e6c:	d9000017 	ldw	r4,0(sp)
   20e70:	403ee83a 	callr	r8
   20e74:	00000206 	br	20e80 <__call_exitprocs+0x104>
   20e78:	b9000017 	ldw	r4,0(r23)
   20e7c:	403ee83a 	callr	r8
   20e80:	99000117 	ldw	r4,4(r19)
   20e84:	e13fcc1e 	bne	fp,r4,20db8 <__call_exitprocs+0x3c>
   20e88:	89000017 	ldw	r4,0(r17)
   20e8c:	993fdc26 	beq	r19,r4,20e00 <__call_exitprocs+0x84>
   20e90:	003fc906 	br	20db8 <__call_exitprocs+0x3c>
   20e94:	00800034 	movhi	r2,0
   20e98:	10800004 	addi	r2,r2,0
   20e9c:	10000f26 	beq	r2,zero,20edc <__call_exitprocs+0x160>
   20ea0:	99400117 	ldw	r5,4(r19)
   20ea4:	99000017 	ldw	r4,0(r19)
   20ea8:	2800091e 	bne	r5,zero,20ed0 <__call_exitprocs+0x154>
   20eac:	20000826 	beq	r4,zero,20ed0 <__call_exitprocs+0x154>
   20eb0:	89000015 	stw	r4,0(r17)
   20eb4:	a8000226 	beq	r21,zero,20ec0 <__call_exitprocs+0x144>
   20eb8:	a809883a 	mov	r4,r21
   20ebc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   20ec0:	9809883a 	mov	r4,r19
   20ec4:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   20ec8:	8cc00017 	ldw	r19,0(r17)
   20ecc:	003fbd06 	br	20dc4 <__call_exitprocs+0x48>
   20ed0:	9823883a 	mov	r17,r19
   20ed4:	2027883a 	mov	r19,r4
   20ed8:	003fba06 	br	20dc4 <__call_exitprocs+0x48>
   20edc:	dfc00a17 	ldw	ra,40(sp)
   20ee0:	df000917 	ldw	fp,36(sp)
   20ee4:	ddc00817 	ldw	r23,32(sp)
   20ee8:	dd800717 	ldw	r22,28(sp)
   20eec:	dd400617 	ldw	r21,24(sp)
   20ef0:	dd000517 	ldw	r20,20(sp)
   20ef4:	dcc00417 	ldw	r19,16(sp)
   20ef8:	dc800317 	ldw	r18,12(sp)
   20efc:	dc400217 	ldw	r17,8(sp)
   20f00:	dc000117 	ldw	r16,4(sp)
   20f04:	dec00b04 	addi	sp,sp,44
   20f08:	f800283a 	ret

00020f0c <__mulsi3>:
   20f0c:	0005883a 	mov	r2,zero
   20f10:	20000726 	beq	r4,zero,20f30 <__mulsi3+0x24>
   20f14:	20c0004c 	andi	r3,r4,1
   20f18:	2008d07a 	srli	r4,r4,1
   20f1c:	18000126 	beq	r3,zero,20f24 <__mulsi3+0x18>
   20f20:	1145883a 	add	r2,r2,r5
   20f24:	294b883a 	add	r5,r5,r5
   20f28:	203ffa1e 	bne	r4,zero,20f14 <__mulsi3+0x8>
   20f2c:	f800283a 	ret
   20f30:	f800283a 	ret

00020f34 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   20f34:	defffd04 	addi	sp,sp,-12
   20f38:	df000215 	stw	fp,8(sp)
   20f3c:	df000204 	addi	fp,sp,8
   20f40:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   20f44:	0001883a 	nop
   20f48:	e0bfff17 	ldw	r2,-4(fp)
   20f4c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   20f50:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   20f54:	10000226 	beq	r2,zero,20f60 <_exit+0x2c>
    ALT_SIM_FAIL();
   20f58:	002af070 	cmpltui	zero,zero,43969
   20f5c:	00000106 	br	20f64 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   20f60:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   20f64:	003fff06 	br	20f64 <_exit+0x30>
